"use client";

import React, { useEffect, useState } from "react";
import Todo from "@/Components/Todo";
import { ToastContainer, toast, Flip } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import axios from "axios";
import Head from "next/head";
import "./globals.css";

const Page = () => {
  const [formData, setformData] = useState({
    title: "",
    description: "",
  });



  const [todoData, settodoData] = useState([]);

  const fetchTodos = async () => {
    const response = await axios("/api");
    settodoData(response.data.todos);
  };



  const deleteTodo = async (id) => {
    const response = await axios.delete("/api", {
      params: {
        mongoID: id,
      },
    });
    toast.success(response.data.msg);
    fetchTodos();
  };



  const CompleteTodo = async (id) => {
    const response = await axios.put(
      "/api",
      {},
      {
        params: {
          mongoID: id,
        },
      }
    );
    toast.success(response.data.msg);
    fetchTodos();
  };



  useEffect(() => {
    fetchTodos();
  }, []);



  const onChangeHandle = (e) => {
    const name = e.target.name;
    const value = e.target.value;
    setformData((form) => ({ ...form, [name]: value }));
    // console.log(formData);
  };



  const onsubmithandle = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post("/api", formData);
      // const response = await axios.post('/api' ,formData);
      toast.success("Todo Created");
      setformData({
        title: "",
        description: "",
      });
      await fetchTodos();
    } catch (error) {
      console.log(error);
    }
  };


  
  return (
    <>
      <Head>
        <title>Next-Todo-App</title>
        <meta name="description" content="Generated by Next.js" />
      </Head>

      <ToastContainer
        position="top-center"
        autoClose={714}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        theme="dark"
        transition={Flip}
      />
      <form
        onSubmit={onsubmithandle}
        className="flex items-start flex-col gap-2 w-[80%] max-w-[600px] mt-24 px-2 mx-auto"
      >
        <input
          type="text"
          value={formData.title}
          onChange={onChangeHandle}
          name="title"
          placeholder="Enter Title"
          className="px-3 py-3 border-2 w-full rounded-md"
        />
        <textarea
          name="description"
          value={formData.description}
          onChange={onChangeHandle}
          placeholder="Enter Description "
          className=" py-3 px-3 border-2 w-full rounded-md "
        ></textarea>
        <button
          type="submit"
          className="bg-orange-600 py-1 px-6 text-white rounded-lg font-semibold mx-auto text-lg"
        >
          {" "}
          Add Todo
        </button>
      </form>

      <div className="relative overflow-x-auto mt-6 w-[60%] mx-auto ">
        <table className="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400  ">
          <thead className="text-xs text-zinc-900 uppercase bg-gray-50 dark:border-gray-400  border-b">
            <tr>
              <th scope="col" className="px-6 py-3 ">
                ID
              </th>
              <th scope="col" className="px-6 py-3">
                Title
              </th>
              <th scope="col" className="px-6 py-3">
                Description
              </th>
              <th scope="col" className="px-6 py-3">
                Status
              </th>
              <th scope="col" className="px-6 py-3">
                Action
              </th>
            </tr>
          </thead>
          <tbody>
            {todoData.map((item, index) => {
              return (
                <Todo
                  key={index}
                  CompleteTodo={CompleteTodo}
                  id={index}
                  mongoID={item._id}
                  title={item.title}
                  description={item.description}
                  complete={item.isCompleted}
                  deleteTodo={deleteTodo}
                />
              );
            })}
          </tbody>
        </table>
      </div>
    </>
  );
};

export default Page;
